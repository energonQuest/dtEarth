/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2013 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHFEATURES_MESH_CLAMPER_H
#define OSGEARTHFEATURES_MESH_CLAMPER_H 1

#include <osgEarthFeatures/Common>
#include <osgEarth/SpatialReference>
#include <osg/NodeVisitor>
#include <osg/fast_back_stack>

namespace osgEarth { namespace Features
{
    using namespace osgEarth;

    /**
     * Utility that takes existing OSG geometry and modifies it so that
     * it "conforms" with a terrain patch.
     */
    class OSGEARTHFEATURES_EXPORT MeshClamper : public osg::NodeVisitor
    {
    public:
        /**
         * Construct a new mesh clamper.
         *
         * @param terrainPatch
         *      Node graph to which to clamp visited geometry.
         * @param terrainSRS
         *      Spatial reference of the map represented by the terrain patch.
         * @param geocentric
         *      Whether the terrain is geocentric (ECEF)
         * @param preserveZ
         *      Whether to preserve the original Z (the height above sea level) as an offset
         * @param scale
         *      (optional) Scale factor for the clamped height value
         * @param offset
         *      (optional) Static offset for the clamped height value
         */
        MeshClamper( 
            osg::Node*              terrainPatch, 
            const SpatialReference* terrainSRS, 
            bool                    geocentric,
            bool                    preserveZ     =false,
            double                  scale         =1.0,
            double                  offset        =0.0 );

        virtual ~MeshClamper() { }

        osg::Node* getTerrainPatch() const { return _terrainPatch.get(); }

        const SpatialReference* getTerrainSRS() const { return _terrainSRS.get(); }

        bool isGeocentric() const { return _geocentric; }

    public: // osg::NodeVisitor

        void apply( osg::Geode& );
        void apply( osg::Transform& );

    protected:
        osg::ref_ptr<osg::Node>              _terrainPatch;
        osg::ref_ptr<const SpatialReference> _terrainSRS;
        bool                                 _geocentric;
        bool                                 _preserveZ;
        double                               _scale;
        double                               _offset;
        osg::fast_back_stack<osg::Matrixd>   _matrixStack;
    };

} } // namespace osgEarth::Features

#endif // OSGEARTHFEATURES_MESH_CLAMPER_H
