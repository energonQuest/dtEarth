/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2013 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_SPARSE_TEXTURE_2D_ARRAY_H
#define OSGEARTH_SPARSE_TEXTURE_2D_ARRAY_H 1

#include <osgEarth/Common>

// this class is only supported in newer OSG versions.
#if OSG_VERSION_GREATER_OR_EQUAL( 2, 9, 8 )

#include <osg/Texture2DArray>

namespace osgEarth
{
    /**
     * Specialized version of osg::Texture2DArray that allows NULL image layers.
     * This is an internal class - no export macro.
     */
    class SparseTexture2DArray : public osg::Texture2DArray
    {
    public:
        SparseTexture2DArray() : osg::Texture2DArray() { }

        SparseTexture2DArray( const SparseTexture2DArray& rhs, const osg::CopyOp& copyop =osg::CopyOp::DEEP_COPY_ALL )
            : osg::Texture2DArray( rhs, copyop ) { }

        META_StateAttribute( osgEarth, SparseTexture2DArray, TEXTURE );

        /** dtor */
        virtual ~SparseTexture2DArray() { }


    public:
        virtual void computeInternalFormat() const;

        virtual void apply( osg::State& state ) const;

    protected:

#if OSG_VERSION_LESS_THAN(2,9,7)
        bool isSafeToUnrefImageData(const osg::State& state) const {
            return (_unrefImageDataAfterApply && areAllTextureObjectsLoaded());
        }
#elif OSG_VERSION_LESS_THAN(2,9,10)
        bool isSafeToUnrefImageData(const osg::State& state) const {
            return (_unrefImageDataAfterApply && state.getMaxTexturePoolSize()==0 && areAllTextureObjectsLoaded());
        }
#endif

    private:
        int firstValidImageIndex() const;

        osg::Image* firstValidImage() const;

        // replaces the same func in the superclass
        void applyTexImage2DArray_subload( osg::State& state, osg::Image* image, GLsizei inwidth, GLsizei inheight, GLsizei indepth, GLint inInternalFormat, GLsizei& numMipmapLevels) const;
    };
}

#endif // OSG_VERSION_GREATER_OR_EQUAL( 2, 9, 8 )

#endif // OSGEARTH_TILE_FACTORY_H
