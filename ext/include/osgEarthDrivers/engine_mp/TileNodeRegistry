/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2013 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_DRIVERS_MP_TERRAIN_ENGINE_TILE_NODE_REGISTRY
#define OSGEARTH_DRIVERS_MP_TERRAIN_ENGINE_TILE_NODE_REGISTRY 1

#include "Common"
#include "TileNode"
#include <osgEarth/Revisioning>
#include <osgEarth/ThreadingUtils>
#include <OpenThreads/Atomic>
#include <map>

namespace osgEarth { namespace Drivers { namespace MPTerrainEngine
{
    using namespace osgEarth;

    /**
     * Holds a reference to each tile created by the driver.
     */
    class TileNodeRegistry : public osg::Referenced
    {
    public:
        typedef std::map< TileKey, osg::ref_ptr<TileNode> > TileNodeMap;

        // Proprtype for a locked tileset operation (see run)
        struct Operation {
            virtual void operator()( TileNodeMap& tiles ) =0;
        };

        struct ConstOperation {
            virtual void operator()( const TileNodeMap& tiles ) const =0;
        };

    public:
        TileNodeRegistry( const std::string& name );

        /* Enabled revisioning on TileNodes, to support incremental update. */
        void setRevisioningEnabled(bool value);

        /**
         * Sets the revision of the map model - the registry will assign this
         * to TileNodes added with add().
         *
         * @param rev        Revision of map
         * @param setToDirty In addition to update the revision, immediately set
         *                   all tiles to dirty as well, effectively forcing an
         *                   update.
         */
        void setMapRevision( const Revision& rev, bool setToDirty =false );

        /** Map revision that the reg will assign to new tiles. */
        const Revision& getMapRevision() const { return _maprev; }

        /**
         * Marks all tiles intersecting the extent as dirty. If incremental
         * update is enabled, they will automatically reload.
         *
         * NOTE: Input extent SRS must match the terrain's SRS exactly.
         *       The method does not check.
         */
        void setDirty(const GeoExtent& extent, unsigned minLevel, unsigned maxLevel);

        /**
         * Sets the current cull traversal frame number so that tiles have
         * access to the information. Atomic.
         */
        void setTraversalFrame(unsigned frame) { _frameNumber.exchange(frame); }

        unsigned getTraversalFrame() const { return _frameNumber; }

        virtual ~TileNodeRegistry() { }

        /** Adds a tile to the registry */
        void add( TileNode* tile );

        /** Adds several tiles to the registry */
        void add( const TileNodeVector& tiles );

        /** Removes a tile */
        void remove( TileNode* tile );

        /** Moves a tile from this registry to another registry */
        void move( TileNode* tile, TileNodeRegistry* destination );

        /** Finds a tile in the registry */
        bool get( const TileKey& key, osg::ref_ptr<TileNode>& out_tile );

        /** Finds a tile in the registry and then removes it. */
        bool take( const TileKey& key, osg::ref_ptr<TileNode>& out_tile );

        /** Whether there are tiles in this registry (snapshot in time) */
        bool empty() const;

        /** Runs an operation against the exclusively locked tile set. */
        void run( Operation& op );
        
        /** Runs an operation against the read-locked tile set. */
        void run( const ConstOperation& op ) const;

        /** Number of tiles in the registry. */
        unsigned size() const { return _tiles.size(); }

    protected:

        bool                              _revisioningEnabled;
        Revision                          _maprev;
        std::string                       _name;
        TileNodeMap                       _tiles;
        OpenThreads::Atomic               _frameNumber;
        mutable Threading::ReadWriteMutex _tilesMutex;
    };

} } } // namespace osgEarth::Drivers::MPTerrainEngine

#endif // OSGEARTH_DRIVERS_MP_TERRAIN_ENGINE_TILE_NODE_REGISTRY
