/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2013 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#include "SilverLiningOptions"
#include <osg/Referenced>
#include <osg/Light>
#include <osg/Camera>
#include <osgEarth/ThreadingUtils>

namespace SilverLining {
    class Atmosphere;
    class CloudLayer;
}
namespace osgEarth {
    class SpatialReference;
}

namespace osgEarth { namespace Drivers { namespace SilverLining
{
    using namespace osgEarth;

    /**
     * Contains all the SilverLining SDK pointers.
     */
    class SilverLiningContext : public osg::Referenced
    {
    public:
        SilverLiningContext(const SilverLiningOptions& options);
        
        /** Sets the light source that will represent the sun */
        void setLight(osg::Light* light);

        /** Sets the spatial reference system of the map */
        void setSRS(const SpatialReference* srs);

    public: // accessors

        bool ready() const { return _initAttempted && !_initFailed; }

        ::SilverLining::Atmosphere* getAtmosphere() { return _atmosphere; }

        /** Spatial reference of the map */
        const SpatialReference* getSRS() const { return _srs.get(); }

        void setSkyBoxSize(double size) { _skyBoxSize = size; }
        double getSkyBoxSize() const { return _skyBoxSize; }

        void initialize(osg::RenderInfo& renderInfo);

        void updateLocation();

        void updateLight();

        /** Set/get the cached camers. NOT THREAD/MULTI-CAM SAFE. */
        /** TODO */
        void setCamera(osg::Camera* camera) { _camera = camera; }
        osg::Camera* getCamera() { return _camera.get(); }

        void setCameraPosition(const osg::Vec3d& pos) { _cameraPos = pos; }
        const osg::Vec3d& getCameraPosition() const { return _cameraPos; }

    protected:

        virtual ~SilverLiningContext();

    private:

        void setupClouds();

    private:
        ::SilverLining::Atmosphere* _atmosphere;
        ::SilverLining::CloudLayer* _clouds;

        double _skyBoxSize;

        osg::observer_ptr<osg::Light>        _light;
        osg::ref_ptr<const SpatialReference> _srs;

        bool             _initAttempted;
        bool             _initFailed;
        Threading::Mutex _initMutex;

        double _maxAmbientLightingAlt;

        osg::observer_ptr<osg::Camera> _camera;
        osg::Vec3d                     _cameraPos; // eye point

        SilverLiningOptions _options;
    };

} } } // namespace osgEarth::Drivers::SilverLining
