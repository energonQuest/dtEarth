/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTHUTIL_CONTOUR_MAP_H
#define OSGEARTHUTIL_CONTOUR_MAP_H

#include <osgEarthUtil/Common>
#include <osgEarth/TerrainEffect>
#include <osgEarth/ImageLayer>
#include <osg/Texture1D>
#include <osg/TransferFunction>

namespace osgEarth {
    class Map;
}

namespace osgEarth { namespace Util
{
    /**
     * Terrain effect that applies a 1D contour coloring texture
     * to the terrain based an on elevation->color map.
     */
    class OSGEARTHUTIL_EXPORT ContourMap : public TerrainEffect
    {
    public:
        /** construct a new effect */
        ContourMap();

        /** Sets a custom transfer function. */
        void setTransferFunction(osg::TransferFunction1D* xf);
        osg::TransferFunction1D* getTransferFunction() const { return _xfer.get(); }

        /** Sets the opacity of the effect (default = 1.0) */
        void setOpacity(float value);

    public: // TerrainEffect interface

        void onInstall(TerrainEngineNode* engine);
        void onUninstall(TerrainEngineNode* engine);

    public: // serialization

        ContourMap(const Config& conf);
        void mergeConfig(const Config& conf);
        virtual Config getConfig() const;

    protected:
        virtual ~ContourMap();
        void init();

        int                                   _unit;
        osg::ref_ptr<osg::TransferFunction1D> _xfer;
        osg::ref_ptr<osg::Texture1D>          _xferTexture;
        osg::ref_ptr<osg::Uniform>            _xferSampler;
        osg::ref_ptr<osg::Uniform>            _xferMin;
        osg::ref_ptr<osg::Uniform>            _xferRange;
        osg::ref_ptr<osg::Uniform>            _opacityUniform;

        optional<float> _opacity;
    };

} } // namespace osgEarth::Util

#endif // OSGEARTHUTIL_CONTOUR_MAP_H
