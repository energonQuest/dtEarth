/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2013 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTHUTIL_ATLAS_BUILDER_H
#define OSGEARTHUTIL_ATLAS_BUILDER_H

#include <osgEarthUtil/Common>
#include <osgEarthSymbology/ResourceLibrary>
#include <vector>

namespace osgDB {
    class Options;
}

namespace osgEarth { namespace Util
{
    /**
     * Compiles a resource library into a texture atlas.
     */
    class OSGEARTHUTIL_EXPORT AtlasBuilder
    {
    public:
        struct Atlas
        {
            // resulting atlas images. The first one is the master atlas image;
            // any following ones correspond to images created based on auxiliary
            // patterns added with addAuxFilePattern.
            std::vector<osg::ref_ptr<osg::Image> >             _images;

            // resulting resource library for the atlas
            osg::ref_ptr<osgEarth::Symbology::ResourceLibrary> _lib;
        };

    public:
        /** Construct a new atlas builder */
        AtlasBuilder(const osgDB::Options* options =0L);

        /** Sets the maximum size of each layer in the output atlas */
        void setSize(unsigned width, unsigned height);

        /** Adds an auxiliary file pattern that should be built. */
        void addAuxFilePattern(const std::string& pattern);

        /** List of aux file patterns */
        const std::vector<std::string>& auxFilePatterns() const { return _auxPatterns; }

        /** Builds an atlas. */
        bool build(
            const osgEarth::Symbology::ResourceLibrary* input,
            const std::string&                          newAtlasURI,
            Atlas&                                      output) const;


    protected:
        unsigned _width;
        unsigned _height;
        osg::ref_ptr<const osgDB::Options> _options;
        std::vector<std::string> _auxPatterns;
    };

} } // namespace osgEarth::Util

#endif // OSGEARTHUTIL_ATLAS_BUILDER_H
